global !p
def math():
	return vim.eval('vimtex#syntax#in_mathzone()') == '1'
def create_matrix(snip):
	matrix_str = (snip.buffer[snip.line].split('mat')[0]+'matrix').strip()

	rows = 'x'.join(snip.buffer[snip.line].split("x", 2)[:-1])
	cols = 'x'.join(snip.buffer[snip.line].split("x", 2)[-1:])

	int_val = lambda string: int(''.join(s for s in string if s.isdigit()))

	rows = int_val(rows)
	cols = int_val(cols)

	offset = cols + 1
	old_spacing = snip.buffer[snip.line][:snip.buffer[snip.line].rfind('\t') + 1]

	snip.buffer[snip.line] = ''

	final_str = old_spacing + "\\begin{"+matrix_str+"}\n"
	for i in range(rows):
		final_str += old_spacing + '\t'
		final_str += " & ".join(['$' + str(i * cols + j + offset) for j in range(cols)])

		final_str += " \\\\\\\n"

	final_str += old_spacing + "\\end{"+matrix_str+"}\n$0"

	snip.expand_anon(final_str)
endglobal

pre_expand "create_matrix(snip)"
snippet "(small|[bBpvV])?mat(rix)?(\d+)x(\d+)" "Generate (small|[bBpvV])?matrix of *rows* by *columns*" r
endsnippet

snippet begin "begin environment" b
\begin{$1}
	$0
\end{$1}
endsnippet

snippet $$ "Inline math $$" iA
$${1}$`!p
if t[2] and t[2][0] not in [',', '.', '?', '-', ' ']:
    snip.rv = ' '
else:
    snip.rv = ''
`$2
endsnippet

snippet () "parens" iA
($1)$0
endsnippet

snippet || "abs" iA
|$1|$0
endsnippet

snippet dm "Display math" b
\[
	$1
\]
$0
endsnippet

snippet ali "align" b
\begin{align*}
	$1
\end{align*}
$0
endsnippet

snippet enuma "enum (a)" b
\begin{enumerate}[(a)]
	\item $1
\end{enumerate}
$0
endsnippet

snippet enumi "enum (i)" b
\begin{enumerate}[(i)]
	\item $1
\end{enumerate}
$0
endsnippet

context "math()"
snippet sqrt "square root" iA
\sqrt{${1:${VISUAL}}}$0
endsnippet

context "math()"
snippet op "open" iA
^\circ
endsnippet

context "math()"
snippet cl "closure" iA
\closure{${1:${VISUAL}}}$0
endsnippet

context "math()"
snippet // "Fraction" iA
\\frac{$1}{$2}$0
endsnippet

context "math()"
snippet '((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)/' "symbol Fraction" wrA
\\frac{`!p snip.rv = match.group(1)`}{$1}$0
endsnippet

context "math()"
priority 1000
snippet '^.*\)/' "() Fraction" wrA
`!p
stripped = match.string[:-1]
depth = 0
i = len(stripped) - 1
while True:
	if stripped[i] == ')': depth += 1
	if stripped[i] == '(': depth -= 1
	if depth == 0: break;
	i -= 1
snip.rv = stripped[0:i] + "\\frac{" + stripped[i+1:-1] + "}"
`{$1}$0
endsnippet

context "math()"
priority 100
snippet "([a-zA-Z])hat" "hat" riA
\hat{`!p
if match.group(1) == 'i':
	snip.rv=r'\imath'
elif match.group(1) == 'j':
	snip.rv=r'\jmath'
else:
	snip.rv=match.group(1)`}
endsnippet

context "math()"
snippet "(\\?\w+)(,\.|\.,)" "Vector postfix" riA
\vec{`!p snip.rv=match.group(1)`}
endsnippet 

context "math()"
snippet xx "cross" iA 
\times
endsnippet

context "math()"
snippet ** "cdot" iA
\cdot
endsnippet

context "math()"
snippet iff "iff" iA
\iff
endsnippet

#context "math()"
#snippet '([A-Za-z])(\d)' "auto subscript" wrA
#`!p snip.rv = match.group(1)`_`!p snip.rv = match.group(2)`
#endsnippet

context "math()"
snippet == "equals" iA
&= $1 \\\\
endsnippet

context "math()"
snippet ... "ldots" iA
\ldots
endsnippet

context "math()"
snippet EE "exists" iA
\exists
endsnippet

context "math()"
snippet AA "for all" iA
\forall
endsnippet

priority 100
context "math()"
snippet '(?<!\\)(sin|cos|tan|ln|log|pi|nabla|sigma|rho|gamma|alpha|beta|psi|tau|lambda)' "function names" rwA
\\`!p snip.rv = match.group(1)`
endsnippet

context "math()"
snippet ss "sigma" iA
\sigma
endsnippet

context "math()"
snippet ll "lambda" iA
\lambda
endsnippet

context "math()"
snippet mm "mu" iA
\mu
endsnippet

context "math()"
snippet '(?<!\\var)(phi)' "varph" rwA
\varphi
endsnippet

context "math()"
snippet 'ee' "varep" rwA
\varepsilon
endsnippet

# context "math()"
# snippet par "derivative with x" iA
# \\frac{\partial $1}{\partial ${2:x}}$0
# endsnippet

context "math()"
snippet bnd "boundary" iA
\partial $0
endsnippet

context "math()"
snippet ^^ "superscript" iA
^{$1}$0
endsnippet


context "math()"
snippet __ "subscript" iA
_{$1}$0
endsnippet

context "math()"
snippet dint "integral" wA
\int_{${1:-\infty}}^{${2:\infty}} ${3:${VISUAL}} $0
endsnippet

context "math()"
snippet lr( "left right" iA
\left( ${1:${VISUAL}} \right) $0
endsnippet

context "math()"
snippet lr< "left right" iA
\langle ${1:${VISUAL}} \rangle $0
endsnippet

context "math()"
snippet lr[ "left right" iA
\left[ ${1:${VISUAL}} \right] $0
endsnippet

context "math()"
snippet lr| "left right" iA
\left| ${1:${VISUAL}} \right| $0
endsnippet

snippet "sec(tion)?" "section" br
\section{$1}$0
endsnippet

snippet prob "problem" b
\section{${1:Problem} ${2:1}}$0
endsnippet

snippet ssec "subsection" b
\subsection{$1}$0
endsnippet

snippet sssec "subsubsection" b
\subsubsection{$1}$0
endsnippet

context "math()"
snippet NN "naturals" iA
\mathbb{N}
endsnippet

context "math()"
snippet ZZ "integers" iA
\mathbb{Z}
endsnippet

context "math()"
snippet RR "reals" iA
\mathbb{R}
endsnippet

context "math()"
snippet QQ "rationals" iA
\mathbb{Q}
endsnippet

context "math()"
snippet CC "complex" iA
\mathbb{C}
endsnippet

context "math()"
snippet FF "field" iA
\mathbb{F}
endsnippet

context "math()"
snippet PP "probability" iA
\mathbb{P} \left[ $1 \right] $0
endsnippet

# context "math()"
# snippet EE "expected value" iA
# \mathbb{E} \left[ $1 \right] $0
# endsnippet
	
context "math()"
snippet P( "power set" iA
\mathcal{P}($1)$0
endsnippet

context "math()"
snippet LIM "lim" iA
\lim\limits_{${1:n \rightarrow \infty}}$0
endsnippet

context "math()"
snippet INT "big sigma" iA
\int_{${1:a}}^{${2:b}} ${3:${VISUAL}} \,dx $0
endsnippet

context "math()"
snippet SUM "big sigma" iA
\sum\limits_{$1}^{${2:\infty}}$0
endsnippet

context "math()"
snippet PROD "big sigma" iA
\prod\limits_{$1}^{$2}$0
endsnippet

context "math()"
snippet VEE "big Vee" iA
\bigvee_{$1}^{$2}$0
endsnippet

context "math()"
snippet WEDGE "big sigma" iA
\bigwedge_{$1}^{$2}$0
endsnippet

context "math()"
snippet CUP "big sigma" iA
\bigcup_{$1}^{${2:\infty}}${0:${VISUAL}}
endsnippet

context "math()"
snippet CAP "big sigma" iA
\bigcap_{$1}^{${2:\infty}}${0:${VISUAL}}
endsnippet

context "math()"
snippet <= "leq" iA
\leq
endsnippet

context "math()"
snippet >= "geq" iA
\geq
endsnippet

context "math()"
snippet => "implies" iA
\Rightarrow
endsnippet

context "math()"
snippet gcd( "textrm" iA
\textrm{gcd}(
endsnippet

context "math()"
snippet -> "rightarrow" iA
\rightarrow
endsnippet

snippet lr{ "left\{ right\}" iA
\left\\{ ${1:${VISUAL}} \right\\} $0
endsnippet

snippet lrf "lfloor rfloor" iA
\lfloor ${1:${VISUAL}} \rfloor $0
endsnippet

snippet lr< "lfloor rfloor" iA
\left< ${1:${VISUAL}} \right> $0
endsnippet

context "math()"
snippet fmatrix "fmat" i
\begin{bmatrix} 1&0\\\\0&-1 \end{bmatrix}
endsnippet

snippet rmatrix "rmat" i
\begin{bmatrix} \cos\left(\dfrac{m}{n} \cdot 2\pi\right) & -\sin\left(\dfrac{m}{n} \cdot 2\pi\right)\\\\ \sin\left(\dfrac{m}{n} \cdot 2\pi\right) & \cos\left(\dfrac{m}{n}\cdot 2\pi\right) \end{bmatrix}
endsnippet

snippet Erdos "erdox w accent" iA
Erd\H{o}s
endsnippet

snippet ~= "isomorphic" iA
\cong
endsnippet

context "math()"
snippet UU  "union" iA
\cup
endsnippet

context "math()"
snippet Nn  "intersection" iA
\cap
endsnippet

context "math()"
priority 1000000
snippet <<=  "normal subgroup" iA
\trianglelefteq
endsnippet

context "math()"
snippet gln "GLn(something)" iA
\text{GL}_{${1:n}}(${2:\mathbb{R}})$0
endsnippet

context "math()"
snippet inv  "normal subgroup" iA
^{-1}
endsnippet

context "math()"
snippet ls  "Lim of sequence" iA
\ls{${1:n}}$0
endsnippet

context "math()"
priority 1000000
snippet binom  "binomial" i
\binom{$1}{$2}$0
endsnippet

snippet bracks "" iA
\texttt{[]}
endsnippet

snippet parns "" iA
\texttt{()}
endsnippet

snippet spadeS "" iA
\spadesuit
endsnippet

snippet clubS "" iA
\clubsuit
endsnippet

snippet heartS "" iA
\heartsuit
endsnippet

snippet diaS "" iA
\diamondsuit
endsnippet

snippet 80150hw2 "" b
Major term: $1\\\\
Minor term: $2\\\\
Middle term: $3\\\\
Major premise: $4\\\\
Minor premise: $5\\\\
Mood: $6\\\\
Figure: $7
endsnippet
